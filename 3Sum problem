
---- Solution 1 ----

public IList<IList<int>> ThreeSum(int[] nums) {
        var ret = new List<IList<int>>();
        int len = nums.Length;
        Array.Sort(nums);
        if(len <= 3){
             return ret;
        }
        
        for(int i = 0; i < len - 3; i++){
            for(int j = i + 1; j < len; j++){
                for(int k = j + 1; k < len; k++){
                    if (k != j + 1 && nums[k] == nums[k - 1]) continue;
                    if (nums[i] + nums[j] + nums[k] == 0) {
                         ret.Add(new List<int>()
                             {
                                 nums[i], 
                                 nums[j], 
                                 nums[k]
                             });
                    }
                }
            }
        }
        return ret;
    }
    
    ---- Problem with solution 1 is that it can give duplicate values ----
    ---- Solution 2 ----
    
    public IList<IList<int>> ThreeSum(int[] nums) {
                  {
        var coll = new List<IList<int>>();
        var hSet = new HashSet<string>();
        
        Array.Sort(nums);
        
        for (int i = 0; i < nums.Length - 2; i++)
        {
            TwoSum(nums[i], i + 1, nums.Length - 1, nums, hSet, coll);
        }
        
        return coll;
    }
    
     void TwoSum(int x, int start, int end, int[] nums, HashSet<string> hSet, List<IList<int>> coll)
    {
        var target = -x;
        
        while (start < end)
        {
            if (nums[start] + nums[end] == target)
            {
                AddTriplet(x, nums[start], nums[end], hSet, coll);
                
                start++;
                end--;
                
                //find the next non duplicated number for start and end
                while (start < end && nums[start] == nums[start - 1])
                {
                    start++;
                }
                
                while (start < end && nums[end] == nums[end + 1])
                {
                    end--;   
                }
            }
            else if (nums[start] + nums[end] < target)
            {
                start++;
            }
            else
            {
                end--;
            }
        }
    }
    
     void AddTriplet(int x, int y, int z, HashSet<string> hSet, List<IList<int>> coll)
    {
        var key = $"{x},{y},{z}";

        if (!hSet.Contains(key))
        {
            hSet.Add(key);
            coll.Add(new List<int>() { x, y, z });
        }        
    }
    }
    
    
