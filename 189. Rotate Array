 public void Rotate(int[] nums, int k) {       
        // Solution 1 -- Time: O(n), Space: O(n)
        int[] output = new int[nums.Length];
        int length = nums.Length;
        for(int i=0; i<nums.Length; i++) {
            output[(i+k) % length] = nums[i];
        }
        for(int i=0; i<nums.Length; i++) {
            nums[i] = output[i];
        }
    }
    
    
    -----using Reverse -----
    
    public class Solution {
    public void Rotate(int[] nums, int k) {
        if(nums == null || nums.Length < 2)
            return;
        
        k %= nums.Length;        
        Reverse(nums, 0, nums.Length - 1);
        Reverse(nums, 0, k - 1);
        Reverse(nums, k, nums.Length - 1); 
    }
    
    public void Reverse(int[] nums, int left, int right)
    {
        while(left < right)
        {
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
    }
}
